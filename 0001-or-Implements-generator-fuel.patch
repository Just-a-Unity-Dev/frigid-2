From 63b64c0495765c9307dc6bdcfb4534b032ccc942 Mon Sep 17 00:00:00 2001
From: moonheart08 <moonheart08@users.noreply.github.com>
Date: Tue, 9 Aug 2022 13:58:16 -0500
Subject: [PATCH 1/3] [or] Implements generator fuel.

---
 .../OuterRim/GeneratorBoundUserInterface.cs   | 39 +++++++++++
 Content.Client/OuterRim/GeneratorWindow.xaml  | 24 +++++++
 .../OuterRim/GeneratorWindow.xaml.cs          | 37 +++++++++++
 .../OuterRim/Generator/GeneratorSystem.cs     | 64 +++++++++++++++++++
 .../Generator/SharedGeneratorComponent.cs     | 63 ++++++++++++++++++
 .../Generator/SharedGeneratorSystem.cs        | 18 ++++++
 .../Power/Generation/generators.yml           |  7 ++
 7 files changed, 252 insertions(+)
 create mode 100644 Content.Client/OuterRim/GeneratorBoundUserInterface.cs
 create mode 100644 Content.Client/OuterRim/GeneratorWindow.xaml
 create mode 100644 Content.Client/OuterRim/GeneratorWindow.xaml.cs
 create mode 100644 Content.Server/OuterRim/Generator/GeneratorSystem.cs
 create mode 100644 Content.Shared/OuterRim/Generator/SharedGeneratorComponent.cs
 create mode 100644 Content.Shared/OuterRim/Generator/SharedGeneratorSystem.cs

diff --git a/Content.Client/OuterRim/GeneratorBoundUserInterface.cs b/Content.Client/OuterRim/GeneratorBoundUserInterface.cs
new file mode 100644
index 0000000000..5a7521d129
--- /dev/null
+++ b/Content.Client/OuterRim/GeneratorBoundUserInterface.cs
@@ -0,0 +1,39 @@
+﻿using Content.Shared.OuterRim.Generator;
+using JetBrains.Annotations;
+using Robust.Client.GameObjects;
+
+namespace Content.Client.OuterRim;
+
+[UsedImplicitly]
+public sealed class GeneratorBoundUserInterface : BoundUserInterface
+{
+    private GeneratorWindow? _window;
+
+    public GeneratorBoundUserInterface(ClientUserInterfaceComponent owner, object uiKey) : base(owner, uiKey)
+    {
+    }
+
+    protected override void Open()
+    {
+        base.Open();
+        _window = new GeneratorWindow(this, Owner.Owner);
+
+        _window.OpenCenteredLeft();
+        _window.OnClose += Close;
+    }
+
+    protected override void UpdateState(BoundUserInterfaceState state)
+    {
+        _window?.Update((GeneratorComponentBuiState)state);
+    }
+
+    protected override void Dispose(bool disposing)
+    {
+       _window?.Dispose();
+    }
+
+    public void SetTargetPower(int target)
+    {
+        SendMessage(new SetTargetPowerMessage(target));
+    }
+}
diff --git a/Content.Client/OuterRim/GeneratorWindow.xaml b/Content.Client/OuterRim/GeneratorWindow.xaml
new file mode 100644
index 0000000000..d12eb34c5f
--- /dev/null
+++ b/Content.Client/OuterRim/GeneratorWindow.xaml
@@ -0,0 +1,24 @@
+﻿<fw:FancyWindow xmlns:fw="clr-namespace:Content.Client.UserInterface"
+                xmlns="https://spacestation14.io"
+                MinSize="270 130"
+                SetSize="360 180"
+                Title="Generator">
+    <BoxContainer Margin="4 0" Orientation="Horizontal">
+        <BoxContainer Orientation="Vertical" HorizontalExpand="True" SizeFlagsStretchRatio="2">
+            <GridContainer Margin="2 0 0 0" Columns="2">
+                <!-- Power -->
+                <Label Text="Target Power (KW):"/>
+                <SpinBox Name="TargetPower"/>
+                <Label Text="Efficiency:"/>
+                <Label Name="Efficiency" Text="???%"/>
+                <Label Text="Fuel use:"/>
+                <ProgressBar Name="FuelFraction" MinValue="0" MaxValue="1"/>
+                <Label Text="Fuel left:"/>
+                <Label Name="FuelLeft" Text="0"/>
+            </GridContainer>
+        </BoxContainer>
+        <PanelContainer Margin="12 0 0 0" StyleClasses="Inset" VerticalAlignment="Center">
+            <SpriteView Name="EntityView" SetSize="64 64" Scale="2 2" OverrideDirection="South" />
+        </PanelContainer>
+    </BoxContainer>
+</fw:FancyWindow>
diff --git a/Content.Client/OuterRim/GeneratorWindow.xaml.cs b/Content.Client/OuterRim/GeneratorWindow.xaml.cs
new file mode 100644
index 0000000000..adfb28d874
--- /dev/null
+++ b/Content.Client/OuterRim/GeneratorWindow.xaml.cs
@@ -0,0 +1,37 @@
+﻿using Content.Client.UserInterface;
+using Content.Shared.OuterRim.Generator;
+using Robust.Client.AutoGenerated;
+using Robust.Client.GameObjects;
+using Robust.Client.UserInterface.XAML;
+
+namespace Content.Client.OuterRim;
+
+[GenerateTypedNameReferences]
+public sealed partial class GeneratorWindow : FancyWindow
+{
+    public GeneratorWindow(GeneratorBoundUserInterface bui, EntityUid vis)
+    {
+        RobustXamlLoader.Load(this);
+        IoCManager.InjectDependencies(this);
+
+        EntityView.Sprite = IoCManager.Resolve<IEntityManager>().GetComponent<SpriteComponent>(vis);
+        TargetPower.ValueChanged += (_, args) =>
+        {
+            bui.SetTargetPower(args.Value);
+        };
+    }
+
+
+    private GeneratorComponentBuiState? _lastState;
+
+    public void Update(GeneratorComponentBuiState state)
+    {
+        // ReSharper disable once CompareOfFloatsByEqualityOperator
+        if (_lastState?.TargetPower != state.TargetPower)
+            TargetPower.OverrideValue((int)(state.TargetPower / 1000.0f));
+        Efficiency.Text = SharedGeneratorSystem.CalcFuelEfficiency(state.TargetPower, state.OptimalPower).ToString("P1");
+        FuelFraction.Value = state.RemainingFuel - (int) state.RemainingFuel;
+        FuelLeft.Text = ((int) MathF.Floor(state.RemainingFuel)).ToString();
+        _lastState = state;
+    }
+}
diff --git a/Content.Server/OuterRim/Generator/GeneratorSystem.cs b/Content.Server/OuterRim/Generator/GeneratorSystem.cs
new file mode 100644
index 0000000000..9ce0e05ab8
--- /dev/null
+++ b/Content.Server/OuterRim/Generator/GeneratorSystem.cs
@@ -0,0 +1,64 @@
+﻿using Content.Server.Materials;
+using Content.Server.Power.Components;
+using Content.Server.Stack;
+using Content.Shared.Construction.Components;
+using Content.Shared.Interaction;
+using Content.Shared.OuterRim.Generator;
+using Robust.Server.GameObjects;
+
+namespace Content.Server.OuterRim.Generator;
+
+/// <inheritdoc/>
+public sealed class GeneratorSystem : SharedGeneratorSystem
+{
+    [Dependency] private readonly UserInterfaceSystem _uiSystem = default!;
+
+    public override void Initialize()
+    {
+        SubscribeLocalEvent<SharedGeneratorComponent, InteractUsingEvent>(OnInteractUsing);
+        SubscribeLocalEvent<SharedGeneratorComponent, SetTargetPowerMessage>(OnTargetPowerSet);
+    }
+
+    private void OnTargetPowerSet(EntityUid uid, SharedGeneratorComponent component, SetTargetPowerMessage args)
+    {
+        component.TargetPower = args.TargetPower * 1000;
+    }
+
+    private void OnInteractUsing(EntityUid uid, SharedGeneratorComponent component, InteractUsingEvent args)
+    {
+        if (!TryComp(args.Used, out MaterialComponent? mat) || !TryComp(args.Used, out StackComponent? stack))
+            return;
+
+        if (!mat.MaterialIds.Contains(component.FuelMaterial))
+            return;
+
+        component.RemainingFuel += stack.Count;
+        QueueDel(args.Used);
+        return;
+    }
+
+    public override void Update(float frameTime)
+    {
+        base.Update(frameTime);
+
+        foreach (var (gen, supplier, xform) in EntityQuery<SharedGeneratorComponent, PowerSupplierComponent, TransformComponent>())
+        {
+            supplier.Enabled = !(gen.RemainingFuel <= 0.0f || xform.Anchored == false);
+
+            supplier.MaxSupply = gen.TargetPower;
+
+            var eff = 1 / CalcFuelEfficiency(gen.TargetPower, gen.OptimalPower);
+
+            gen.RemainingFuel = MathF.Max(gen.RemainingFuel - (gen.OptimalBurnRate * frameTime * eff), 0.0f);
+            UpdateUi(gen);
+        }
+    }
+
+    private void UpdateUi(SharedGeneratorComponent comp)
+    {
+        if (!_uiSystem.IsUiOpen(comp.Owner, GeneratorComponentUiKey.Key))
+            return;
+
+        _uiSystem.TrySetUiState(comp.Owner, GeneratorComponentUiKey.Key, new GeneratorComponentBuiState(comp));
+    }
+}
diff --git a/Content.Shared/OuterRim/Generator/SharedGeneratorComponent.cs b/Content.Shared/OuterRim/Generator/SharedGeneratorComponent.cs
new file mode 100644
index 0000000000..11683e624b
--- /dev/null
+++ b/Content.Shared/OuterRim/Generator/SharedGeneratorComponent.cs
@@ -0,0 +1,63 @@
+﻿using Robust.Shared.Serialization;
+
+namespace Content.Shared.OuterRim.Generator;
+
+/// <summary>
+/// This is used for...
+/// </summary>
+[RegisterComponent]
+public sealed class SharedGeneratorComponent : Component
+{
+    [DataField("remainingFuel"), ViewVariables(VVAccess.ReadWrite)]
+    public float RemainingFuel = 0.0f;
+
+    [DataField("targetPower"), ViewVariables(VVAccess.ReadWrite)]
+    public float TargetPower = 15_000.0f;
+    [DataField("optimalPower"), ViewVariables(VVAccess.ReadWrite)]
+    public float OptimalPower = 15_000.0f;
+    [DataField("optimalBurnRate"), ViewVariables(VVAccess.ReadWrite)]
+    public float OptimalBurnRate = 1 / 4.0f; // Once every 45 seconds.
+
+    [DataField("fuelMaterial"), ViewVariables(VVAccess.ReadWrite)]
+    public string FuelMaterial = "Plasma";
+}
+
+/// <summary>
+/// Sent to the server to adjust the targetted power level.
+/// </summary>
+[Serializable, NetSerializable]
+public sealed class SetTargetPowerMessage : BoundUserInterfaceMessage
+{
+    public int TargetPower;
+
+    public SetTargetPowerMessage(int targetPower)
+    {
+        TargetPower = targetPower;
+    }
+}
+
+/// <summary>
+/// Contains network state for SharedGeneratorComponent.
+/// </summary>
+[Serializable, NetSerializable]
+public sealed class GeneratorComponentBuiState : BoundUserInterfaceState
+{
+    public float RemainingFuel;
+    public float TargetPower;
+    public float OptimalPower;
+    public float OptimalBurnRate; // Once every 120 seconds.
+
+    public GeneratorComponentBuiState(SharedGeneratorComponent component)
+    {
+        RemainingFuel = component.RemainingFuel;
+        TargetPower = component.TargetPower;
+        OptimalPower = component.OptimalPower;
+        OptimalBurnRate = component.OptimalBurnRate;
+    }
+}
+
+[Serializable, NetSerializable]
+public enum GeneratorComponentUiKey
+{
+    Key
+}
diff --git a/Content.Shared/OuterRim/Generator/SharedGeneratorSystem.cs b/Content.Shared/OuterRim/Generator/SharedGeneratorSystem.cs
new file mode 100644
index 0000000000..b23cfd04ba
--- /dev/null
+++ b/Content.Shared/OuterRim/Generator/SharedGeneratorSystem.cs
@@ -0,0 +1,18 @@
+﻿namespace Content.Shared.OuterRim.Generator;
+
+/// <summary>
+/// This handles small, portable generators that run off a material fuel.
+/// </summary>
+public abstract class SharedGeneratorSystem : EntitySystem
+{
+    /// <inheritdoc/>
+    public override void Initialize()
+    {
+
+    }
+
+    public static float CalcFuelEfficiency(float targetPower, float optimalPower)
+    {
+        return MathF.Pow(optimalPower / targetPower, 1.3f);
+    }
+}
diff --git a/Resources/Prototypes/Entities/Structures/Power/Generation/generators.yml b/Resources/Prototypes/Entities/Structures/Power/Generation/generators.yml
index 2577953381..f0aaa1f8f4 100644
--- a/Resources/Prototypes/Entities/Structures/Power/Generation/generators.yml
+++ b/Resources/Prototypes/Entities/Structures/Power/Generation/generators.yml
@@ -161,6 +161,13 @@
   components:
   - type: PowerSupplier
     supplyRate: 30000
+  - type: Generator
+  - type: ActivatableUI
+    key: enum.GeneratorComponentUiKey.Key
+  - type: UserInterface
+    interfaces:
+      - key: enum.GeneratorComponentUiKey.Key
+        type: GeneratorBoundUserInterface
   - type: Sprite
     sprite: Structures/Power/Generation/portable_generator.rsi
     state: portgen0_1
-- 
2.39.0

